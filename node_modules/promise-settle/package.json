{
  "_args": [
    [
      {
        "raw": "promise-settle@https://registry.npmjs.org/promise-settle/-/promise-settle-0.3.0.tgz",
        "scope": null,
        "escapedName": "promise-settle",
        "name": "promise-settle",
        "rawSpec": "https://registry.npmjs.org/promise-settle/-/promise-settle-0.3.0.tgz",
        "spec": "https://registry.npmjs.org/promise-settle/-/promise-settle-0.3.0.tgz",
        "type": "remote"
      },
      "/Users/gene.schroer@ibm.com/BlueHack/marbles"
    ]
  ],
  "_from": "promise-settle@>=0.3.0 <0.4.0",
  "_id": "promise-settle@0.3.0",
  "_inCache": true,
  "_location": "/promise-settle",
  "_phantomChildren": {},
  "_requested": {
    "raw": "promise-settle@https://registry.npmjs.org/promise-settle/-/promise-settle-0.3.0.tgz",
    "scope": null,
    "escapedName": "promise-settle",
    "name": "promise-settle",
    "rawSpec": "https://registry.npmjs.org/promise-settle/-/promise-settle-0.3.0.tgz",
    "spec": "https://registry.npmjs.org/promise-settle/-/promise-settle-0.3.0.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/",
    "/fabric-client"
  ],
  "_resolved": "https://registry.npmjs.org/promise-settle/-/promise-settle-0.3.0.tgz",
  "_shasum": "b4efd572a1eb74cf794f828cd349da40a08e4e96",
  "_shrinkwrap": null,
  "_spec": "promise-settle@https://registry.npmjs.org/promise-settle/-/promise-settle-0.3.0.tgz",
  "_where": "/Users/gene.schroer@ibm.com/BlueHack/marbles",
  "author": {
    "name": "Patrick Gaubatz",
    "email": "patrick@gaubatz.at"
  },
  "bugs": {
    "url": "https://github.com/pgaubatz/node-promise-settle/issues"
  },
  "dependencies": {},
  "description": "settle([...]) returns a Promise that is fulfilled when all items in the array are either fulfilled or rejected",
  "devDependencies": {
    "browserify": "^11.2.0",
    "mocha": "^2.2.4",
    "native-promise-only": "^0.8.1"
  },
  "engines": {
    "node": ">= 0.10.0"
  },
  "homepage": "https://github.com/pgaubatz/node-promise-settle#readme",
  "keywords": [
    "es6",
    "promise",
    "settle",
    "Promise.settle"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "promise-settle",
  "optionalDependencies": {},
  "readme": "# promise-settle\n[![npm version](https://badge.fury.io/js/promise-settle.svg)](http://badge.fury.io/js/promise-settle)\n[![Build Status](https://travis-ci.org/pgaubatz/node-promise-settle.svg?branch=master)](https://travis-ci.org/pgaubatz/node-promise-settle)\n[![Coverage Status](https://coveralls.io/repos/pgaubatz/node-promise-settle/badge.svg)](https://coveralls.io/r/pgaubatz/node-promise-settle)\n[![Dependency Status](https://david-dm.org/pgaubatz/node-promise-settle.svg)](https://david-dm.org/pgaubatz/node-promise-settle)\n\nsettle([...]) returns a Promise that is fulfilled when all items in the array are either fulfilled or rejected.  \n\n## Installation\n\n    npm install --save promise-settle\n\n## Usage\n```javascript\nvar settle = require('promise-settle');\n\nsettle([true, Promise.resolve(3), Promise.reject(new Error('error'))])\n  .then(function (results) {\n    results.forEach(function (result) {\n      if (result.isFulfilled()) {\n        console.log('Promise is fulfilled', result.value());\n      } else {\n        console.log('Promise is rejected', result.reason());\n      }\n    })\n  });\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/pgaubatz/node-promise-settle.git"
  },
  "scripts": {
    "build": "browserify -s Promise.settle index.js > build/promise-settle.js",
    "cover": "istanbul cover ./node_modules/mocha/bin/_mocha --report html -- -R spec",
    "test": "mocha -R spec test/"
  },
  "version": "0.3.0"
}
